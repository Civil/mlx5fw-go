package types

import "fmt"

// GetSectionTypeName returns a human-readable name for a section type
func GetSectionTypeName(sectionType uint16) string {
	switch sectionType {
	case SectionTypeBootCode:
		return "BOOT_CODE"
	case SectionTypePCICode:
		return "PCI_CODE"
	case SectionTypeMainCode:
		return "MAIN_CODE"
	case SectionTypePCIELinkCode:
		return "PCIE_LINK_CODE"
	case SectionTypeIronPrepCode:
		return "IRON_PREP_CODE"
	case SectionTypePostIronBootCode:
		return "POST_IRON_BOOT_CODE"
	case SectionTypeUpgradeCode:
		return "UPGRADE_CODE"
	case SectionTypeHWBootCfg:
		return "HW_BOOT_CFG"
	case SectionTypeHWMainCfg:
		return "HW_MAIN_CFG"
	case SectionTypePhyUCCode:
		return "PHY_UC_CODE"
	case SectionTypePhyUCConsts:
		return "PHY_UC_CONSTS"
	case SectionTypePCIEPhyUCCode:
		return "PCIE_PHY_UC_CODE"
	case SectionTypeCCIRInfraCode:
		return "CCIR_INFRA_CODE"
	case SectionTypeCCIRAlgoCode:
		return "CCIR_ALGO_CODE"
	case SectionTypeBoot3Code:
		return "BOOT3_CODE"
	case SectionTypeImageInfo:
		return "IMAGE_INFO"
	case SectionTypeFWBootCfg:
		return "FW_BOOT_CFG"
	case SectionTypeFWMainCfg:
		return "FW_MAIN_CFG"
	case SectionTypeAPUKernel:
		return "APU_KERNEL"
	case SectionTypeACECode:
		return "ACE_CODE"
	case SectionTypeROMCode:
		return "ROM_CODE"
	case SectionTypeResetInfo:
		return "RESET_INFO"
	case SectionTypeDbgFWINI:
		return "DBG_FW_INI"
	case SectionTypeDbgFWParams:
		return "DBG_FW_PARAMS"
	case SectionTypeFWAdb:
		return "FW_ADB"
	case SectionTypeImageSignature256:
		return "IMAGE_SIGNATURE_256"
	case SectionTypePublicKeys2048:
		return "PUBLIC_KEYS_2048"
	case SectionTypeForbiddenVersions:
		return "FORBIDDEN_VERSIONS"
	case SectionTypeImageSignature512:
		return "IMAGE_SIGNATURE_512"
	case SectionTypePublicKeys4096:
		return "PUBLIC_KEYS_4096"
	case SectionTypeHMACDigest:
		return "HMAC_DIGEST"
	case SectionTypeRsaPublicKey:
		return "RSA_PUBLIC_KEY"
	case SectionTypeRsa4096Signatures:
		return "RSA_4096_SIGNATURES"
	case SectionTypeEncryptionKeyTransition:
		return "ENCRYPTION_KEY_TRANSITION"
	case SectionTypePxirIni:
		return "PXIR_INI"
	case SectionTypePxirIni1:
		return "PXIR_INI1"
	case SectionTypeNvdaRotCertificates:
		return "NVDA_ROT_CERTIFICATES"
	case SectionTypeExclkSyncInfo:
		return "EXCLKSYNC_INFO"
	case SectionTypeMainPagesHashes:
		return "MAIN_PAGES_HASHES"
	case SectionTypeMainPagesLockedHashes:
		return "MAIN_PAGES_LOCKED_HASHES"
	case SectionTypeStrnMain:
		return "STRN_MAIN"
	case SectionTypeStrnIron:
		return "STRN_IRON"
	case SectionTypeStrnTile:
		return "STRN_TILE"
	case SectionTypeMainData:
		return "MAIN_DATA"
	case SectionTypeFwDebugDump2:
		return "FW_DEBUG_DUMP_2"
	case SectionTypeSecurityLog:
		return "SECURITY_LOG"
	case SectionTypeMfgInfo:
		return "MFG_INFO"
	case SectionTypeDevInfo:
		return "DEV_INFO"
	case SectionTypeNvData1:
		return "NV_DATA"
	case SectionTypeVpdR0:
		return "VPD_R0"
	case SectionTypeNvData2:
		return "NV_DATA"
	case SectionTypeFwNvLog:
		return "FW_NV_LOG"
	case SectionTypeNvData0:
		return "NV_DATA"
	case SectionTypeDevInfo1:
		return "DEV_INFO"
	case SectionTypeDevInfo2:
		return "DEV_INFO"
	case SectionTypeCRDumpMaskData:
		return "CRDUMP_MASK_DATA"
	case SectionTypeFwInternalUsage:
		return "FW_INTERNAL_USAGE"
	case SectionTypeProgrammableHwFw1:
		return "PROGRAMMABLE_HW_FW"
	case SectionTypeProgrammableHwFw2:
		return "PROGRAMMABLE_HW_FW"
	case SectionTypeDigitalCertPtr:
		return "DIGITAL_CERT_PTR"
	case SectionTypeDigitalCertRw:
		return "DIGITAL_CERT_RW"
	case SectionTypeLcIni1Table:
		return "LC_INI1_TABLE"
	case SectionTypeLcIni2Table:
		return "LC_INI2_TABLE"
	case SectionTypeLcIniNvData:
		return "LC_INI_NV_DATA"
	case SectionTypeCertChain0:
		return "CERT_CHAIN_0"
	case SectionTypeDigitalCaCertRw:
		return "DIGITAL_CACERT_RW"
	case SectionTypeCertificateChains1:
		return "CERTIFICATE_CHAINS_1"
	case SectionTypeCertificateChains2:
		return "CERTIFICATE_CHAINS_2"
	case SectionTypeRootCertificates1:
		return "ROOT_CERTIFICATES_1"
	case SectionTypeRootCertificates2:
		return "ROOT_CERTIFICATES_2"
	case SectionTypeToolsArea:
		return "TOOLS_AREA"
	case SectionTypeHashesTable:
		return "HASHES_TABLE"
	case SectionTypeHwPtr:
		return "HW_PTR"
	case SectionTypeFwDebugDump:
		return "FW_DEBUG_DUMP"
	case SectionTypeItoc:
		return "ITOC"
	case SectionTypeDtoc:
		return "DTOC"
	case SectionTypeEnd:
		return "END"
	case SectionTypeBoot2:
		return "BOOT2"
	default:
		return fmt.Sprintf("UNKNOWN_0x%02X", sectionType)
	}
}

// GetDTOCSectionTypeName returns a human-readable name for a DTOC section type
func GetDTOCSectionTypeName(sectionType uint8) string {
	// DTOC section types in raw entries already have 0xE prefix
	switch sectionType {
	case 0xE0:
		return "MFG_INFO"
	case 0xE1:
		return "DEV_INFO"
	case 0xE2:
		return "NV_DATA"
	case 0xE3:
		return "VPD_R0"
	case 0xE4:
		return "NV_DATA"
	case 0xE5:
		return "FW_NV_LOG"
	case 0xE6:
		return "NV_DATA"
	case 0xEA:
		return "FW_INTERNAL_USAGE"
	case 0xD5:
		return "SECURITY_LOG"
	case 0xEB:
		return "PROGRAMMABLE_HW_FW"
	case 0xEC:
		return "PROGRAMMABLE_HW_FW"
	case 0x30:
		return "CERTIFICATE_CHAINS_1"
	case 0x31:
		return "CERTIFICATE_CHAINS_2"
	case 0x80:
		return "ROOT_CERTIFICATES_1"
	case 0x81:
		return "ROOT_CERTIFICATES_2"
	case 0x90:
		return "FW_INTERNAL_USAGE"
	case 0x91:
		return "DIGITAL_CERT_RW"
	case 0x92:
		return "DIGITAL_CACERT_RW"
	case 0x99:
		return "DIGITAL_CERT_PTR"
	case 0xED:
		return "DIGITAL_CERT_PTR"
	case 0xEE:
		return "DIGITAL_CERT_RW"  // mstflint shows this as DIGITAL_CERT_RW
	case 0xEF:
		return "CERT_CHAIN_0"
	case 0xF0:
		return "ROOT_CERTIFICATES_1"
	case 0xF1:
		return "ROOT_CERTIFICATES_2"
	case 0xF2:
		return "CERT_CHAIN_0"
	case 0xF3:
		return "DIGITAL_CACERT_RW"
	case 0xF4:
		return "CERTIFICATE_CHAINS_1"
	case 0xF5:
		return "CERTIFICATE_CHAINS_2"
	case 0xF6:
		return "ROOT_CERTIFICATES_1"
	case 0xF7:
		return "ROOT_CERTIFICATES_2"
	case 0xF9:
		return "DIGITAL_CERT_PTR"
	case 0xFA:
		return "FW_INTERNAL_USAGE"
	default:
		return fmt.Sprintf("UNKNOWN_DTOC_0x%02X", sectionType)
	}
}